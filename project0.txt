Project 0 Report
Shamim Golafshan:
a) Experience Installing Nachos:
   I used SSH extension on VS code to connect to the wolf server of FIU. Then, downloaded the Nachos source code from the link on canvas. 
   During installation, I faced with several issues like outdated bool.h dependency and incorrect paths to system headers (like, stdarg.h). 
   I edited utility.h file to remove the bool.h dependency. Also, I checked the environment variables like LD_LIBRARY_PATH were correctly set 
   and verified that make and gcc were available on the server. After that, I re-extracted the source code and then using make the project was 
   compiled.

b) Experience with the Tests:
  For testing, I ran the Threads Demo in the threads directory. the output of this test showed two threads (thread 0 and thread 1) which were 
   looping 5 times each. then I ran the User Program Demo using halt program in the test directory. this test showed me "Machine halting!". I also 
   used the -s flag to run nachos in single-step mode. Each test provide expected results.

c) Description of the Thread Class:
   The thread class, manages the life cycle of kernel-level threads, which also enable mutitasking. this class can track thread's state, such as 
   JUST_CREATED, RUNNING, READY, or BLOCKED which works with the scheduler to switch between threads as needed. this class includes methods like Fork, 
   Yield, Sleep, Finish. Fork can creates a new thread and assigns it a function to execute, Yield allows the CPU to be used by another thread, Sleep 
   pauses the thread and removes it from the ready queue and Finish cleans up resources once a thread has completed its task. Each of the thread maintains 
   own stack and saves its machine state to facilitate context switching. In user mode, the thread also manages user registers and an AddrSpace for 
   virtual memory.


Livan Miranda Labrada:
a) Experience Installing Nachos (Platform Details):
   I installed Nachos 3.4 on the FIU Ocelot server, which runs a Linux environment. After connecting via SSH, I unpacked the tar archive 
   using tar -xzf and then confirmed that the necessary tools—particularly make and gcc—were installed. I also ensured that my LD_LIBRARY_PATH 
   environment variable included /usr/local/lib to avoid library-related issues. Compiling Nachos in the nachos-3.4/code directory produced 
   the nachos binary with no errors. The directory structure is quite clear once you identify important subdirectories: threads 
   (for kernel-level threading), userprog (for running user-mode programs under Nachos), and test (which contains sample programs like halt).

b) Experience with the Tests:
   I ran ./nachos in the threads subdirectory and observed multiple loop messages, confirming thread switching was correct. Then, I tested 
   user programs by executing ./nachos -x test/halt, which displayed “Machine halting!” and printed system stats. Using the -s (single-step) 
   flag provided detailed instruction-level debugging. All tests worked as expected with no runtime errors.

c) Description of the Thread Class in Nachos:
   The Thread class in Nachos encapsulates a kernel-level thread, maintaining its stack, CPU register state, and status 
   (which can be JUST_CREATED, RUNNING, READY, or BLOCKED). It provides core methods like Fork, which sets up and runs a specified function in a 
   new thread; Yield, which voluntarily gives up the CPU to let other ready threads run; Sleep, which blocks the thread and lets the scheduler pick 
   a different one; and Finish, signaling that the thread has completed execution. Internally, each Thread tracks its machineState (for saving registers 
   during context switches) and allocates its own stack space to store local variables and function call frames. If running in user mode, the thread 
   also has a separate set of userRegisters and points to an AddrSpace that represents the program’s virtual memory. This structure allows multiple threads 
   to run concurrently under Nachos, managing both kernel-only threads and user-level processes.


Trinity Socorro:
a) Nachos Download Experience:
   My experience installing Nachos was fairly simple. Through a vscode extension (Remote SSH), 
   I was able to connect to my wolf.cs.fiu.edu virtual machine. Using a wget command, I downloaded the nachos-3.4 zip, 
   which I then unzipped and proceeded to compile nachos. 

b) Running Test Experience: 
   The tests performed as expected. I used the TA's instructional video as a visual guide to ensure that the single step test 
   produced the expected outcomes, which it did as it hung after 22 ticks and executed one step at a time. 
   The first test also ran as expected, as it also hung after 22 ticks.

c) Nachos Thread Class Description:
   The purpose of the Threads class is to handle the thread objects and their lifecycle. Within the threads folder, there is 
   thread.h which declares the threads class, thread.cc is the implementation, and the switch files handle the switching 
   between threads. Focusing on the thread.cc file, there are four methods that contribute to thread management. These are
   Fork, Finish, Yield, and Sleep. When called, the Fork method creates a new thread to execute a procedure. Finish cleans
   up once a thread finishes its task. Yield allows for CPU to focus on a different thread that is ready to run. Finally, Sleep
   blocks the thread and removes it from the ready queue. These methods, along with the rest of the Threads class is vital for 
   Nachos to run effectively. 
